This directory contains many of the python scripts needed to generate parameters for homo-oligomer DPD systems. 
They all run perfectly fine on python 2.7, but you need to modify the print statements for them to run properly in any 
python 3.x

Required Libraries:
numpy
scipy
optparse

Files are as follows:
    required: 
         DPD_OZ.py: This file contains the necessary support functions to compute the cavity correlation function used in the equation of state
         rcGWEOSFunctions.py: This file contains all support functions needed for all computations. It has been thouroughly checked. There is some
                              strange looking stuff in it that is correct when you really dig through it. 

    support:
         computeaii.py: this file you give as inputs the target pressure of the system, the bead density of the pure phase system, the bond length between beads
                         in the chain , and the number of beads. YOu can also provide a guess for aii to speed up the computation
                         Run as: python computeaii.py --rho 7.3 --L 0.4 --Pt 41.89 --m 6.0 --aiiguess 25.0
                         Be sure to input all variables as floating points or sometimes the program will get the wrong answer. 
                         This is useful also if you want to compute a chain in the rGW case as opposed to the crGW EOS case where you can set the 
                         number of beads in the chain to 1.0 and utlized the bead density. Here all quantities are provided in their respective coarse grained units. 
         
         computeaiimoldens.py: identical to computeaii.py except it uses as an input instead rhom which is the pure phase molecule density. To compute an identical 
                               system to the one above run as
                               Run as: python computeaiimoldens.py --rhom 1.2 --L 0.4 --Pt 41.89 --m 6.0 --aiiguess 25.0
                               note how we now use the molecule pure phase density given that rhom=rhobead/m
        
         computeaPressure.py: instead you feed it the typical DPD input parameters and it outputs the coarse grained pressure of the system. 
                              Run as: python computeaPressure.py --rho 7.3 --L 0.4 --m 6.0 --aii 8.27388987645
         
         computeaPressurerhom.py Same as above but uses the moleucle density.
                                 Run as: python computeaPressure.py --rho 1.2 --L 0.4 --m 6.0 --aii 8.27388987645
         
         computeaijAthermal.py : used to compute the athermal cross interaction parameter between beads in two different chain types
                                 Run as: python computeaijAthermal.py --rhom1 1.2 --rhom2 1.66 --m1 6.0 --m2 2.0 --a11 10.0 --a22 20.0 --L1 0.3 --L2 0.4 

         computeaijThermal.py : used to compute the thermal cross interaction parameter betwene two beads in two different chain types for a given flory-huggins chi paramter
                                Note that it has an internal variable rhoref which is set to 5 since often the reference denisty is set to a value of 5.0. If you are not using this 
                                reference density change this value before running. 
                                Run as: python computeaijThermal.py --rhom1 1.2 --rhom2 1.66 --m1 6.0 --m2 2.0 --a11 10.0 --a22 20.0 --L1 0.3 --L2 0.4 --chi 0.35

         computeChi.py: used to compute the flory huggins chi parameter corresponding to the set of input parameters. see the above note about reference densities

                               Run as: python computeChi.py --rhom1 1.2 --rhom2 1.66 --m1 6.0 --m2 2.0 --a11 10.0 --a22 20.0 --L1 0.3 --L2 0.4 --a12 15.0

